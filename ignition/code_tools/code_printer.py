"""Code printers from abstract code graph"""

import distutils.ccompiler

from code_tools import comment_code, indent_code
from iterators import flatten


class CodePrinter(object):
    """Base class for language based code printers"""
    pass


class CCodePrinter(CodePrinter):
    """Code printer for C file"""

    def __init__(self, code_obj):
        self.code_obj = code_obj
        self.c_files = []
        self.line_comment = "//"

    def code_str(self):
        return self._visit_node(self.code_obj)

    def to_file(self, filename, header=None):
        if header:
            self._print_header_file(header)
        with open(filename, 'w') as fp:
            self._print_head(fp)
            fp.write(self.code_str())
        self.c_files.append(filename)

    def to_ctypes_module(self, modname):
        self.to_file(modname+".c", modname+".h")
        self._compile_shared_lib(modname)
        ctypes_mod = "from ctypes import cdll\n"
        ctypes_mod += "lib = cdll.LoadLibrary('./lib%(modname)s.so')\n"
        for f in self.code_obj.get_functions():
            ctypes_mod += "%(func)s = lib.%(func)s" % {"func": f}
        with open(modname + ".py", 'w') as fp:
            fp.write(ctypes_mod % {"modname": modname})

    def _compile_shared_lib(self, libname):
        if not self.c_files:
            raise RuntimeError("Must call to_file before compile")

        # TODO: Add configuration options for compiler
        compiler = distutils.ccompiler.new_compiler()
        objs = compiler.compile(self.c_files)
        compiler.link_shared_lib(objs, libname)

    def _print_head(self, fp):
        out_code = "Code generated by Ignition.\n"
        out_code = comment_code(out_code, self.line_comment)
        fp.write(out_code)

    def _print_header_file(self, headername):
        with open(headername, 'w') as fp:
            self._print_head(fp)

    def _vars_decl(self, vars):
        ret_str = ''
        for var in vars:
            if var.name == "indexed_variable":
                ret_str += self._index_vars_decl(var)
            else:
                ret_str += "%(var_type)s %(var_name)s" % var.__dict__
                val = var.init_var
                ret_str += "" if val is None else "= %s" % val
            ret_str += ";\n"
        return ret_str

    def _index_vars_decl(self, var):
        ret_str = "%(var_type)s%(type_mod)s %(var_name)s%(init_str)s"
        var_name = var.var_name
        init_val = var.init_var
        init_str = ''
        type_mod = ''
        if var.shape:
            var_name += "[%s]" % "][".join(map(str, var.shape))
            if init_val:
                init_str = " = "
                init_str += str(init_val).replace('[', '{').replace(']', '}')
        else:
            type_mod = "*"
            if init_val:
                raise RuntimeError("Cannot assign init_val to unshaped variable")
        return ret_str % {"var_type": var.var_type,
                          "var_name": var_name,
                          "type_mod": type_mod,
                          "init_str": init_str}

    def _visit_node(self, node, indent=0):
        if hasattr(node, "__iter__"):
            return "".join(map(lambda n: self._visit_node(n, indent), node))
        visitor_func = self.__getattribute__("_visit_%s" % node.name)
        return visitor_func(node, indent)

    def _visit_variable(self, node, indent=0):
        return ''

    def _visit_indexed_variable(self, node, indent=0):
        return ''

    def _visit_codeobj(self, node, indent=0):
        return self._visit_node(node.objs, indent)

    def _visit_block_head(self, node, indent=0):
        """Generic code for all blocks"""
        vars = set(node.get_vars())
        ret_str = "{\n"
        ret_str += indent_code(self._vars_decl(vars), indent + 2)
        return ret_str

    def _visit_block_foot(self, node, indent):
        ret_str = "}\n"
        return ret_str

    def _visit_functionnode(self, node, indent=0):
        ret_str = "%(ret_type)s %(func_name)s" % {'ret_type': node.ret_type if node.ret_type is not None else "void",
                                                  'func_name': node.func_name}
        ret_str += "(%s)\n" % ", ".join(map(lambda x: x.var_type + " " + x.var_name, node.inputs))
        ret_str += self._visit_block_head(node, indent)
        ret_str += self._visit_node(node.objs, indent + 2)
        if node.output:
            ret_str += "  return %(output)s;\n" % node.__dict__
        ret_str += self._visit_block_foot(node, indent)
        return indent_code(ret_str, indent)

    def _visit_loopnode(self, node, indent=0):
        """Adds a c-code snippet to a loop"""
        kind = node.kind
        if kind == 'for':
            ret_str = "for (%(idx)s = %(init)s; " \
                      "%(idx)s < %(test)s; %(idx)s += %(inc)s)\n"
            ret_str += self._visit_block_head(node, indent)
        # TODO: Need to support more while loops
        elif kind == "while":
            ret_str = "(%(idx)s = %(init)s; \n" \
                      "while (%(idx)s < %(test)s)\n"
            ret_str += self._visit_block_head(node, indent)
        else:
            raise NotImplementedError("Do not know how to print %s kind of loop" \
                                      % kind)
        ret_str = ret_str % node.__dict__
        ret_str += self._visit_node(node.objs, indent + 2)
        if kind == "while":
            ret_str += "  %(idx)s += %(inc)s);\n" % node.__dict__
        ret_str += self._visit_block_foot(node, indent)
        return indent_code(ret_str, indent)

    def _visit_statement(self, node, indent=0, add_end=True):
        operator = node.operator
        args = map(lambda x: self._visit_statement(x, add_end=False) if hasattr(x, 'name') and x.name == "statement" else str(x),
                   node.args)
        visit_func_str = "_visit_statement_%s" % node.operator
        if hasattr(self, visit_func_str):
            ret_func = self.__getattribute__(visit_func_str)
        else:
            ret_func = self._visit_statement_default
        ret_str = ret_func(operator, args)
        if add_end:
            ret_str += ";\n"
        return indent_code(ret_str, indent)

    def _visit_statement_default(self, op, args):
        if len(args) == 2 and op in ['=', '+', '+=', '*', '*=', '-', '-=', '/', '/=']:
            ret_str = " ".join([args[0], str(op), args[1]])
        elif len(args) == 1 and op in ['*', '&', '-', '++', '--']:
            ret_str = str(op) + args[0]
        else:
            ret_str = "%s(%s)" % (op, ", ".join(args))
        return ret_str

    def _visit_statement_index(self, op, args):
        return "%s[%s]" % (args[0], "][".join(map(str, args[1:])))

"""Tests for code generated by pyclawpack"""
from __future__ import division
import numpy as np

from ignition.riemann import (Conserved, Constant, ConstantField, Generator)

def acoustic_eqns ():
    """Returns flux, conserved, constant_fields"""
    q = Conserved('q')
    p, u = q.fields(['p','u'])
    rho = Constant('rho')
    K = Constant('bulk')
    a = ConstantField('a')
    b = ConstantField('b')

    f = [ a*K*u ,
          b*p/rho]
    return f, q, [a,b]

def get_pointwise_acoustic_inputs ():
    q_l = np.array([1.0, 2.0])
    q_r = np.array([1.2, 2.2])
    aux_l = np.array([5.0, 20])
    aux_r = np.array([6.0, 19.0])
    aux_global = {"bulk": 1.0, "rho": 2.0}
    return q_l, q_r, aux_l, aux_r, aux_global

def get_vectorized_acoustic_inputs ():
    q_l = np.array([[1.0, 1.2, 1.3], [2.0, 2.2, 2.3]])
    q_r = np.array([[1.1, 1.4, 1.6], [2.0, 3.2, 4.3]])
    aux_l = np.array([[5.0, 5.0, 5.0], [20, 20, 20]])
    aux_r = np.array([[6.0, 6.0, 6.0], [19.0, 19.0, 19.0]])
    aux_global = {"bulk": 1.0, "rho": 2.0}
    return q_l, q_r, aux_l, aux_r, aux_global

def test_pointwise_acoustic_symbolic_kernel():
    """Acoustic equation with pointwise eval and symbolic eigenvalues"""
    flux, conserved, const_fields = acoustic_eqns()
    g = Generator(flux=flux, conserved=conserved, constant_fields=const_fields)
    eval(compile(g.generate(), "<generated acoustic kernel>", "exec"))
    locals()['kernel'](*get_pointwise_acoustic_inputs())

def test_pointwise_acoustic_numeric_kernel():
    """Mostly a test to see if things can be generated and run"""
    flux, conserved, const_fields = acoustic_eqns()
    g = Generator(flux=flux, conserved=conserved, constant_fields=const_fields,
                  eig_method="numerical")
    eval(compile(g.generate(), "<generated acoustic kernel>", "exec"))
    locals()['kernel'](*get_pointwise_acoustic_inputs())

def test_vectorized_acoustic_symbolic_kernel():
    """Mostly a test to see if things can be generated and run"""
    flux, conserved, const_fields = acoustic_eqns()
    g = Generator(flux=flux, conserved=conserved, constant_fields=const_fields,
                  evaluation="vectorized")
    eval(compile(g.generate(), "<generated acoustic kernel>", "exec"))
    locals()['kernel'](*get_vectorized_acoustic_inputs())

# def test_vectorized_acoustic_numeric_kernel():
#     """Mostly a test to see if things can be generated and run"""
#     flux, conserved, const_fields = acoustic_eqns()
#     g = Generator(flux=flux, conserved=conserved, constant_fields=const_fields,
#                   evaluation="vectorized", eig_method="numerical")
#     eval(compile(g.generate(), "<generated acoustic kernel>", "exec"))
#     locals()['kernel'](*get_vectorized_acoustic_inputs())

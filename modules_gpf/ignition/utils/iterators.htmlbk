

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>ignition.utils.iterators &mdash; Ignition v0.1.0 documentation</title>
    <link rel="stylesheet" href="../../../static/agogo.css" type="text/css" />
    <link rel="stylesheet" href="../../../static/pygments.css" type="text/css" />
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../../',
        VERSION:     '0.1.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../../static/jquery.js"></script>
    <script type="text/javascript" src="../../../static/underscore.js"></script>
    <script type="text/javascript" src="../../../static/doctools.js"></script>
    <link rel="top" title="Ignition v0.1.0 documentation" href="../../../index.html" />
    <link rel="up" title="Module code" href="../../index.html" /> 
  </head>
  <body>
    <div class="header-wrapper">
      <div class="header">
        <h1><a href="../../../index.html">Ignition v0.1.0 documentation</a></h1>
        <div class="rel">
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |
          <a href="../../../genindex.html" title="General Index"
             accesskey="I">index</a>
        </div>
       </div>
    </div>

    <div class="content-wrapper">
      <div class="content">
        <div class="document">
            
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <h1>Source code for ignition.utils.iterators</h1><div class="highlight"><pre>
<span class="sd">&quot;&quot;&quot;Defines some custom iterators&quot;&quot;&quot;</span>

<span class="kn">from</span> <span class="nn">copy</span> <span class="kn">import</span> <span class="n">copy</span>

<div class="viewcode-block" id="UpdatingPermutationIterator"><a class="viewcode-back" href="../../../modules/utils.html#ignition.utils.iterators.UpdatingPermutationIterator">[docs]</a><span class="k">class</span> <span class="nc">UpdatingPermutationIterator</span> <span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;A permutation iterator that can update to stop cycling on a particular</span>
<span class="sd">    position.</span>
<span class="sd">    </span>
<span class="sd">    &gt;&gt;&gt; iter = UpdatingPermuataionIterator(range(2))</span>
<span class="sd">    &gt;&gt;&gt; list(iter)</span>
<span class="sd">    [[0, 1], [1, 0]]</span>
<span class="sd">    &gt;&gt;&gt; iter = UpdatingPermutationIterator(range(3))</span>
<span class="sd">    &gt;&gt;&gt; iter.next()</span>
<span class="sd">    [0, 1, 2]</span>
<span class="sd">    &gt;&gt;&gt; iter.bad_pos(0)</span>
<span class="sd">    &gt;&gt;&gt; iter.next()</span>
<span class="sd">    [1, 0, 2]</span>
<span class="sd">    &gt;&gt;&gt; iter.bad_pos(0)</span>
<span class="sd">    &gt;&gt;&gt; list(iter)</span>
<span class="sd">    &gt;&gt;&gt; [[2, 0, 1], [2, 1, 0]]</span>
<span class="sd">    </span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">items</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_items</span> <span class="o">=</span> <span class="n">copy</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_n</span> <span class="o">=</span> <span class="n">n</span> <span class="k">if</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">n</span> <span class="o">&lt;=</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span> <span class="k">else</span> <span class="nb">len</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_n</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_done</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_first</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">_increment</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">i</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_n</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_items</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
            <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">):</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_done</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">_swap</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">):</span>
        <span class="n">tmp</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span>

    <span class="k">def</span> <span class="nf">_is_perm</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nb">set</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">))</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__iter__</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span>

    <span class="k">def</span> <span class="nf">reset</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span> <span class="o">=</span> <span class="nb">range</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_n</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_done</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_first</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">next</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_first</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_first</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">return</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">idx</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">_items</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">)</span>
        <span class="k">while</span> <span class="ow">not</span> <span class="bp">self</span><span class="o">.</span><span class="n">_done</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_increment</span><span class="p">()</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_is_perm</span><span class="p">():</span>
                <span class="n">ret_val</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">idx</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">_items</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">ret_val</span>
        <span class="k">raise</span> <span class="ne">StopIteration</span>

    <span class="k">def</span> <span class="nf">bad_pos</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pos</span><span class="p">):</span>
        <span class="c">#find largest after bad pos</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_items</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">pos</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_n</span><span class="p">):</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">elif</span> <span class="n">pos</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_done</span> <span class="o">=</span> <span class="bp">True</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">pos</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">pos</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_n</span><span class="p">):</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">_curr</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>

</div>
<div class="viewcode-block" id="flatten"><a class="viewcode-back" href="../../../modules/utils.html#ignition.utils.iterators.flatten">[docs]</a><span class="k">def</span> <span class="nf">flatten</span> <span class="p">(</span><span class="n">alst</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;A recursive flattening algorithm for handling arbitrarily nested iterators</span>
<span class="sd">    </span>
<span class="sd">    &gt;&gt;&gt; flatten([0, [1,(2, 3), [4, [5, [6, 7]]]], 8])</span>
<span class="sd">    [1, 2, 3, 4, 5, 6, 7, 8]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">_recur</span> <span class="p">(</span><span class="n">blst</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">blst</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">hasattr</span><span class="p">(</span><span class="n">elem</span><span class="p">,</span> <span class="s">&quot;__iter__&quot;</span><span class="p">):</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">_recur</span><span class="p">(</span><span class="n">elem</span><span class="p">):</span>
                    <span class="k">yield</span> <span class="n">i</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">yield</span> <span class="n">elem</span>
    <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">_recur</span><span class="p">(</span><span class="n">alst</span><span class="p">))</span>
</div>
<div class="viewcode-block" id="flatten_list"><a class="viewcode-back" href="../../../modules/utils.html#ignition.utils.iterators.flatten_list">[docs]</a><span class="k">def</span> <span class="nf">flatten_list</span> <span class="p">(</span><span class="n">alst</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Similar to flatten except only flattens lists</span>
<span class="sd">    </span>
<span class="sd">    &gt;&gt;&gt; flatten_list([0, (2, 3), [4])</span>
<span class="sd">    [0, (2, 3), 4]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">_recur</span> <span class="p">(</span><span class="n">blst</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">elem</span> <span class="ow">in</span> <span class="n">blst</span><span class="p">:</span>
            <span class="k">if</span> <span class="nb">type</span><span class="p">(</span><span class="n">elem</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">list</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">_recur</span><span class="p">(</span><span class="n">elem</span><span class="p">):</span>
                    <span class="k">yield</span> <span class="n">i</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">yield</span> <span class="n">elem</span>
    <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="n">_recur</span><span class="p">(</span><span class="n">alst</span><span class="p">))</span>
</div>
<div class="viewcode-block" id="nested_list_idxs"><a class="viewcode-back" href="../../../modules/utils.html#ignition.utils.iterators.nested_list_idxs">[docs]</a><span class="k">def</span> <span class="nf">nested_list_idxs</span> <span class="p">(</span><span class="n">alst</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Returns tuple generator corresponding to all indexes in the </span>
<span class="sd">    nested list</span>

<span class="sd">    &gt;&gt;&gt; list(nested_list_iter([[1,2],[3]])</span>
<span class="sd">    [(0,0), (0,1), (1,0)]</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">def</span> <span class="nf">_recur</span> <span class="p">(</span><span class="n">blst</span><span class="p">,</span> <span class="n">acc</span><span class="p">):</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="nb">type</span><span class="p">(</span><span class="n">blst</span><span class="p">)</span> <span class="ow">is</span> <span class="nb">list</span><span class="p">:</span>
            <span class="k">return</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">acc</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">ret_val</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">blst</span><span class="p">)):</span>
                <span class="n">curr_acc</span> <span class="o">=</span> <span class="n">acc</span> <span class="o">+</span> <span class="p">[</span><span class="n">i</span><span class="p">]</span>
                <span class="n">curr_val</span> <span class="o">=</span> <span class="n">_recur</span><span class="p">(</span><span class="n">blst</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">curr_acc</span><span class="p">)</span>
                <span class="n">ret_val</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">curr_val</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">ret_val</span>
    <span class="k">return</span> <span class="n">flatten_list</span><span class="p">(</span><span class="n">_recur</span><span class="p">(</span><span class="n">alst</span><span class="p">,</span> <span class="p">[]))</span></div>
</pre></div>

          </div>
        </div>
      </div>
        </div>
        <div class="sidebar">
          <h3>Table Of Contents</h3>
          <ul>
<li class="toctree-l1"><a class="reference internal" href="../../../intro.html">Introduction</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../install.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../tutorial/index.html">Tutorial</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../further_resources.html">Further Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../modules/index.html">Ignition Modules Reference</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../contributing.html">Contributing</a></li>
</ul>

          <h3 style="margin-top: 1.5em;">Search</h3>
          <form class="search" action="../../../search.html" method="get">
            <input type="text" name="q" size="18" />
            <input type="submit" value="Go" />
            <input type="hidden" name="check_keywords" value="yes" />
            <input type="hidden" name="area" value="default" />
          </form>
          <p class="searchtip" style="font-size: 90%">
            Enter search terms or a module, class or function name.
          </p>
        </div>
        <div class="clearer"></div>
      </div>
    </div>

    <div class="footer-wrapper">
      <div class="footer">
        <div class="left">
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |
          <a href="../../../genindex.html" title="General Index"
             >index</a>
        </div>

        <div class="right">
          
    <div class="footer">
        &copy; Copyright 2010, Andy R. Terrel.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.0.5.
    </div>
        </div>
        <div class="clearer"></div>
      </div>
    </div>

  </body>
</html>



<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>ignition.flame.generator &mdash; Ignition v0.1.0 documentation</title>
    <link rel="stylesheet" href="../../../static/agogo.css" type="text/css" />
    <link rel="stylesheet" href="../../../static/pygments.css" type="text/css" />
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../../',
        VERSION:     '0.1.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../../static/jquery.js"></script>
    <script type="text/javascript" src="../../../static/underscore.js"></script>
    <script type="text/javascript" src="../../../static/doctools.js"></script>
    <link rel="top" title="Ignition v0.1.0 documentation" href="../../../index.html" />
    <link rel="up" title="Module code" href="../../index.html" /> 
  </head>
  <body>
    <div class="header-wrapper">
      <div class="header">
        <h1><a href="../../../index.html">Ignition v0.1.0 documentation</a></h1>
        <div class="rel">
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |
          <a href="../../../genindex.html" title="General Index"
             accesskey="I">index</a>
        </div>
       </div>
    </div>

    <div class="content-wrapper">
      <div class="content">
        <div class="document">
            
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <h1>Source code for ignition.flame.generator</h1><div class="highlight"><pre>
<span class="sd">&quot;&quot;&quot;Code generator for PME Language&quot;&quot;&quot;</span>

<span class="kn">from</span> <span class="nn">ignition.flame.pobj</span> <span class="kn">import</span> <span class="n">PObj</span>
<span class="kn">from</span> <span class="nn">ignition.flame.printing</span> <span class="kn">import</span> <span class="n">get_printer</span>

<div class="viewcode-block" id="PAlgGenerator"><a class="viewcode-back" href="../../../modules/flame.html#ignition.flame.generator.PAlgGenerator">[docs]</a><span class="k">class</span> <span class="nc">PAlgGenerator</span> <span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Wrapper object for generating partitioned algorithms.</span>

<span class="sd">    operation: The operation to generate</span>
<span class="sd">    args: List of PObjs that are input for the operation.</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__init__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">loop_inv_op</span><span class="p">,</span> <span class="n">solver</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kws</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop_inv_op</span> <span class="o">=</span> <span class="n">loop_inv_op</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">_args</span> <span class="o">=</span> <span class="n">args</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">op</span> <span class="o">=</span> <span class="n">kws</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;op&quot;</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">op</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">op_applied</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">op</span><span class="p">(</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">obj</span><span class="p">,</span> <span class="n">args</span><span class="p">))</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">op_applied</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">inputs</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">arg_src</span> <span class="ow">in</span> \
                             <span class="p">[</span><span class="n">PObj</span><span class="o">.</span><span class="n">ARG_SRC</span><span class="o">.</span><span class="n">Input</span><span class="p">,</span> <span class="n">PObj</span><span class="o">.</span><span class="n">ARG_SRC</span><span class="o">.</span><span class="n">Overwrite</span><span class="p">],</span>
                             <span class="n">args</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">outputs</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">arg_src</span> <span class="ow">in</span> \
                             <span class="p">[</span><span class="n">PObj</span><span class="o">.</span><span class="n">ARG_SRC</span><span class="o">.</span><span class="n">Output</span><span class="p">,</span> <span class="n">PObj</span><span class="o">.</span><span class="n">ARG_SRC</span><span class="o">.</span><span class="n">Overwrite</span><span class="p">],</span>
                             <span class="n">args</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">out_only</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">.</span><span class="n">arg_src</span> <span class="o">==</span> <span class="n">PObj</span><span class="o">.</span><span class="n">ARG_SRC</span><span class="o">.</span><span class="n">Output</span><span class="p">,</span>
                               <span class="n">args</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">operands</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">inputs</span> <span class="o">+</span> <span class="bp">self</span><span class="o">.</span><span class="n">out_only</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">outputs</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">,</span> \
             <span class="s">&quot;PAlgGenerator requires at least one output, none given.&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">debug</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">solver</span> <span class="o">=</span> <span class="n">solver</span>


    <span class="nd">@property</span>
<div class="viewcode-block" id="PAlgGenerator.partition"><a class="viewcode-back" href="../../../modules/flame.html#ignition.flame.generator.PAlgGenerator.partition">[docs]</a>    <span class="k">def</span> <span class="nf">partition</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Partition mapping&quot;&quot;&quot;</span>
        <span class="n">ret_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_args</span><span class="p">:</span>
            <span class="n">ret_dict</span><span class="p">[</span><span class="n">v</span><span class="o">.</span><span class="n">obj</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">part</span>
        <span class="k">return</span> <span class="n">ret_dict</span>
</div>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">part_fun</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">ret_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_args</span><span class="p">:</span>
            <span class="n">ret_dict</span><span class="p">[</span><span class="n">v</span><span class="o">.</span><span class="n">obj</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">part_fun</span>
        <span class="k">return</span> <span class="n">ret_dict</span>

    <span class="nd">@property</span>
<div class="viewcode-block" id="PAlgGenerator.repartition"><a class="viewcode-back" href="../../../modules/flame.html#ignition.flame.generator.PAlgGenerator.repartition">[docs]</a>    <span class="k">def</span> <span class="nf">repartition</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Repartition mapping&quot;&quot;&quot;</span>
        <span class="n">ret_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_args</span><span class="p">:</span>
            <span class="n">ret_dict</span><span class="p">[</span><span class="n">v</span><span class="o">.</span><span class="n">obj</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">repart</span>
        <span class="k">return</span> <span class="n">ret_dict</span>
</div>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">repart_fun</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">ret_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_args</span><span class="p">:</span>
            <span class="n">ret_dict</span><span class="p">[</span><span class="n">v</span><span class="o">.</span><span class="n">obj</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">repart_fun</span>
        <span class="k">return</span> <span class="n">ret_dict</span>

    <span class="nd">@property</span>
<div class="viewcode-block" id="PAlgGenerator.fuse"><a class="viewcode-back" href="../../../modules/flame.html#ignition.flame.generator.PAlgGenerator.fuse">[docs]</a>    <span class="k">def</span> <span class="nf">fuse</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Fuse mapping&quot;&quot;&quot;</span>
        <span class="n">ret_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_args</span><span class="p">:</span>
            <span class="n">ret_dict</span><span class="p">[</span><span class="n">v</span><span class="o">.</span><span class="n">obj</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">fuse</span>
        <span class="k">return</span> <span class="n">ret_dict</span>
</div>
    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">fuse_fun</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">ret_dict</span> <span class="o">=</span> <span class="p">{}</span>
        <span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">_args</span><span class="p">:</span>
            <span class="n">ret_dict</span><span class="p">[</span><span class="n">v</span><span class="o">.</span><span class="n">obj</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span><span class="o">.</span><span class="n">fuse_fun</span>
        <span class="k">return</span> <span class="n">ret_dict</span>

    <span class="k">def</span> <span class="nf">_repart_invariant</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">loop_inv_op</span><span class="p">(</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">o</span><span class="p">:</span> <span class="n">o</span><span class="o">.</span><span class="n">repart</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_args</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">_fuse_invariant</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">loop_inv_op</span><span class="p">(</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">o</span><span class="p">:</span> <span class="n">o</span><span class="o">.</span><span class="n">fuse</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_args</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">_loop_invariant</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">loop_inv_op</span><span class="p">(</span><span class="o">*</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">o</span><span class="p">:</span> <span class="n">o</span><span class="o">.</span><span class="n">part</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">_args</span><span class="p">))</span>

    <span class="k">def</span> <span class="nf">_guard</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">o</span><span class="p">:</span><span class="n">o</span><span class="o">.</span><span class="n">part</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">outputs</span><span class="p">)</span>

<div class="viewcode-block" id="PAlgGenerator.gen_update"><a class="viewcode-back" href="../../../modules/flame.html#ignition.flame.generator.PAlgGenerator.gen_update">[docs]</a>    <span class="k">def</span> <span class="nf">gen_update</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="nb">type</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">solve_kws</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Generates the loop updates and pre/post conditions inside loop.&quot;&quot;&quot;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">loop_inv</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_loop_invariant</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">b4_eqns</span><span class="p">,</span> <span class="n">kb4</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_repart_invariant</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">aft_eqns</span><span class="p">,</span> <span class="n">kaft</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_fuse_invariant</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">guard</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_guard</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">update_tups</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">solver</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">b4_eqns</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">aft_eqns</span><span class="p">,</span>
                                        <span class="n">e_knowns</span><span class="o">=</span><span class="n">kb4</span> <span class="o">+</span> <span class="n">kaft</span><span class="p">,</span> <span class="o">**</span><span class="n">solve_kws</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">update_tups</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">print</span> <span class="s">&quot;PAlgGenerator.generate: no updates found.&quot;</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">update</span> <span class="o">=</span> <span class="bp">None</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">update</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">update_tups</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
</div></div>
<div class="viewcode-block" id="generate"><a class="viewcode-back" href="../../../modules/flame.html#ignition.flame.generator.generate">[docs]</a><span class="k">def</span> <span class="nf">generate</span> <span class="p">(</span><span class="n">filename</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">filetype</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">op</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">loop_inv</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">inv_args</span><span class="o">=</span><span class="p">[],</span>
              <span class="n">PME</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">solver</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">solve_kws</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Utility function for generating a flame algorithm.</span>
<span class="sd">    </span>
<span class="sd">    Will create a generator object and write it to file, then return the</span>
<span class="sd">    generator object.</span>
<span class="sd">    </span>
<span class="sd">    For more complete documentation see the PAlgGenerator object and </span>
<span class="sd">    the printing module.</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">gen_obj</span> <span class="o">=</span> <span class="n">PAlgGenerator</span><span class="p">(</span><span class="n">loop_inv</span><span class="p">,</span> <span class="n">solver</span><span class="p">,</span> <span class="o">*</span><span class="n">inv_args</span><span class="p">,</span> <span class="n">op</span><span class="o">=</span><span class="n">op</span><span class="p">)</span>
    <span class="n">gen_obj</span><span class="o">.</span><span class="n">gen_update</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">filetype</span><span class="p">,</span> <span class="o">**</span><span class="n">solve_kws</span><span class="p">)</span>
    <span class="n">get_printer</span><span class="p">(</span><span class="n">gen_obj</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">filetype</span><span class="p">)</span><span class="o">.</span><span class="n">write</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">gen_obj</span>
</pre></div></div>

          </div>
        </div>
      </div>
        </div>
        <div class="sidebar">
          <h3>Table Of Contents</h3>
          <ul>
<li class="toctree-l1"><a class="reference internal" href="../../../intro.html">Introduction</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../install.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../tutorial/index.html">Tutorial</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../further_resources.html">Further Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../modules/index.html">Ignition Modules Reference</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../contributing.html">Contributing</a></li>
</ul>

          <h3 style="margin-top: 1.5em;">Search</h3>
          <form class="search" action="../../../search.html" method="get">
            <input type="text" name="q" size="18" />
            <input type="submit" value="Go" />
            <input type="hidden" name="check_keywords" value="yes" />
            <input type="hidden" name="area" value="default" />
          </form>
          <p class="searchtip" style="font-size: 90%">
            Enter search terms or a module, class or function name.
          </p>
        </div>
        <div class="clearer"></div>
      </div>
    </div>

    <div class="footer-wrapper">
      <div class="footer">
        <div class="left">
          <a href="../../../py-modindex.html" title="Python Module Index"
             >modules</a> |
          <a href="../../../genindex.html" title="General Index"
             >index</a>
        </div>

        <div class="right">
          
    <div class="footer">
        &copy; Copyright 2010, Andy R. Terrel.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.0.5.
    </div>
        </div>
        <div class="clearer"></div>
      </div>
    </div>

  </body>
</html>

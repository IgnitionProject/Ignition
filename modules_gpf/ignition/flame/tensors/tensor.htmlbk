

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>ignition.flame.tensors.tensor &mdash; Ignition v0.1.0 documentation</title>
    <link rel="stylesheet" href="../../../../static/agogo.css" type="text/css" />
    <link rel="stylesheet" href="../../../../static/pygments.css" type="text/css" />
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../../../',
        VERSION:     '0.1.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../../../static/jquery.js"></script>
    <script type="text/javascript" src="../../../../static/underscore.js"></script>
    <script type="text/javascript" src="../../../../static/doctools.js"></script>
    <link rel="top" title="Ignition v0.1.0 documentation" href="../../../../index.html" />
    <link rel="up" title="Module code" href="../../../index.html" /> 
  </head>
  <body>
    <div class="header-wrapper">
      <div class="header">
        <h1><a href="../../../../index.html">Ignition v0.1.0 documentation</a></h1>
        <div class="rel">
          <a href="../../../../py-modindex.html" title="Python Module Index"
             >modules</a> |
          <a href="../../../../genindex.html" title="General Index"
             accesskey="I">index</a>
        </div>
       </div>
    </div>

    <div class="content-wrapper">
      <div class="content">
        <div class="document">
            
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <h1>Source code for ignition.flame.tensors.tensor</h1><div class="highlight"><pre>
<span class="sd">&quot;&quot;&quot;Rules for symbolic tensor algebra&quot;&quot;&quot;</span>

<span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Symbol</span><span class="p">,</span> <span class="n">symbols</span>
<span class="kn">from</span> <span class="nn">sympy.core.decorators</span> <span class="kn">import</span> <span class="n">call_highest_priority</span>


<span class="kn">from</span> <span class="nn">tensor_expr</span> <span class="kn">import</span> <span class="n">TensorExpr</span>
<span class="kn">from</span> <span class="nn">tensor_names</span> <span class="kn">import</span> <span class="n">add_idx</span><span class="p">,</span> <span class="n">convert_name</span><span class="p">,</span> <span class="n">set_lower_ind</span><span class="p">,</span> <span class="n">set_upper_ind</span><span class="p">,</span> \
                         <span class="n">to_latex</span>


<span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">k</span> <span class="o">=</span> <span class="n">symbols</span><span class="p">(</span><span class="s">&#39;mnk&#39;</span><span class="p">)</span>

<div class="viewcode-block" id="Tensor"><a class="viewcode-back" href="../../../../modules/flame.html#ignition.flame.tensors.tensor.Tensor">[docs]</a><span class="k">class</span> <span class="nc">Tensor</span> <span class="p">(</span><span class="n">TensorExpr</span><span class="p">,</span> <span class="n">Symbol</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Basic Tensor symbol.</span>
<span class="sd">    </span>
<span class="sd">    &gt;&gt;&gt; A = Tensor(&#39;A&#39;, rank=2)</span>
<span class="sd">    &gt;&gt;&gt; B = Tensor(&#39;B&#39;, rank=2)</span>
<span class="sd">    &gt;&gt;&gt; x = Tensor(&#39;x&#39;, rank=1)</span>
<span class="sd">    &gt;&gt;&gt; y = Tensor(&#39;y&#39;, rank=1)</span>
<span class="sd">    &gt;&gt;&gt; alpha = Tensor(&#39;alpha&#39;, rank=0)</span>
<span class="sd">    &gt;&gt;&gt; beta = Tensor(&#39;beta&#39;, rank=0)</span>
<span class="sd">    &gt;&gt;&gt; alpha*A*x + beta*B*x</span>
<span class="sd">    alpha*A*x + beta*B*x</span>
<span class="sd">    &gt;&gt;&gt; expand((alpha*A+beta*B)*(x+y))</span>
<span class="sd">    alpha*A*x + alpha*A*y + beta*B*x + beta*B*y</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">def</span> <span class="nf">__new__</span> <span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">ten</span><span class="p">,</span> <span class="n">rank</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">has_inv</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">transposed</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                 <span class="o">**</span><span class="n">kws</span><span class="p">):</span>

        <span class="c"># Handle either str or change the behavior</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">ten</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">ten</span>
            <span class="k">if</span> <span class="n">rank</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Must give rank with string arg.&quot;</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">name</span> <span class="ow">in</span> <span class="p">[</span><span class="s">&#39;0&#39;</span><span class="p">,</span> <span class="s">&#39;1&#39;</span><span class="p">]:</span>
                <span class="n">name</span> <span class="o">=</span> <span class="s">&quot;</span><span class="si">%s</span><span class="s">_</span><span class="si">%d</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rank</span><span class="p">)</span>

            <span class="k">if</span> <span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">):</span>
                <span class="n">has_inv</span> <span class="o">=</span> <span class="bp">False</span>
            <span class="k">elif</span> <span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span> <span class="ow">and</span> <span class="n">rank</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">]:</span>
                <span class="n">has_inv</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">elif</span> <span class="n">rank</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="n">has_inv</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="k">elif</span> <span class="n">has_inv</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">has_inv</span> <span class="o">=</span> <span class="bp">False</span>

        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">ten</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">):</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">ten</span><span class="o">.</span><span class="n">name</span>
            <span class="k">if</span> <span class="n">has_inv</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">has_inv</span> <span class="o">=</span> <span class="n">ten</span><span class="o">.</span><span class="n">has_inverse</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">rank</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">rank</span> <span class="o">!=</span> <span class="n">ten</span><span class="o">.</span><span class="n">rank</span><span class="p">:</span>
                <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Given rank and rank of ten don&#39;t match&quot;</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">shape</span> <span class="ow">is</span> <span class="bp">None</span> <span class="ow">and</span> <span class="n">transposed</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">shape</span> <span class="o">=</span> <span class="n">ten</span><span class="o">.</span><span class="n">shape</span>
            <span class="k">if</span> <span class="n">transposed</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
                <span class="n">transposed</span> <span class="o">=</span> <span class="n">ten</span><span class="o">.</span><span class="n">transposed</span>
            <span class="n">rank</span> <span class="o">=</span> <span class="n">ten</span><span class="o">.</span><span class="n">rank</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Unable to create Tensor from a </span><span class="si">%s</span><span class="s">&quot;</span> \
                             <span class="o">%</span> <span class="nb">type</span><span class="p">(</span><span class="n">ten</span><span class="p">))</span>

        <span class="k">if</span> <span class="n">rank</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">kws</span><span class="o">.</span><span class="n">has_key</span><span class="p">(</span><span class="s">&quot;commutative&quot;</span><span class="p">):</span>
            <span class="n">kws</span><span class="p">[</span><span class="s">&#39;commutative&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="bp">False</span>

        <span class="k">if</span> <span class="n">transposed</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">transposed</span> <span class="o">=</span> <span class="bp">False</span>
        <span class="k">if</span> <span class="n">transposed</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">+=</span> <span class="s">&quot;&#39;&quot;</span>

        <span class="n">obj</span> <span class="o">=</span> <span class="n">Symbol</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">**</span><span class="n">kws</span><span class="p">)</span>
        <span class="n">obj</span><span class="o">.</span><span class="n">rank</span> <span class="o">=</span> <span class="n">rank</span>
        <span class="n">obj</span><span class="o">.</span><span class="n">has_inverse</span> <span class="o">=</span> <span class="n">has_inv</span>
        <span class="n">obj</span><span class="o">.</span><span class="n">transposed</span> <span class="o">=</span> <span class="n">transposed</span>
        <span class="n">obj</span><span class="o">.</span><span class="n">_set_default_shape</span><span class="p">(</span><span class="n">shape</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">obj</span>

    <span class="k">def</span> <span class="nf">_set_default_shape</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">shape</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">shape</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">transposed</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">2</span> <span class="ow">and</span> <span class="n">shape</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">shape</span> <span class="o">=</span> <span class="p">(</span><span class="n">n</span><span class="p">,</span> <span class="n">n</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="bp">self</span><span class="o">.</span><span class="n">shape</span> <span class="o">=</span> <span class="n">shape</span>

    <span class="nd">@property</span>
    <span class="k">def</span> <span class="nf">latex</span> <span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">to_latex</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="p">)</span>

<div class="viewcode-block" id="Tensor.update"><a class="viewcode-back" href="../../../../modules/flame.html#ignition.flame.tensors.tensor.Tensor.update">[docs]</a>    <span class="k">def</span> <span class="nf">update</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">l_ind</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">u_ind</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">rank</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
             <span class="n">has_inverse</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">conform_name</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
        <span class="sd">&quot;&quot;&quot;Forms a new Tensor with only the listed attributes changed&quot;&quot;&quot;</span>
        <span class="n">name</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="k">if</span> <span class="n">name</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">name</span>
        <span class="k">if</span> <span class="n">l_ind</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">set_lower_ind</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">l_ind</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">u_ind</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">set_upper_ind</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">u_ind</span><span class="p">)</span>
        <span class="n">rank</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">rank</span> <span class="k">if</span> <span class="n">rank</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">rank</span>
        <span class="k">if</span> <span class="n">conform_name</span><span class="p">:</span>
            <span class="n">name</span> <span class="o">=</span> <span class="n">convert_name</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rank</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">Tensor</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">rank</span><span class="o">=</span><span class="n">rank</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="n">shape</span><span class="p">,</span> <span class="n">has_inv</span><span class="o">=</span><span class="n">has_inverse</span><span class="p">)</span>
</div></div>
<div class="viewcode-block" id="BasisVector"><a class="viewcode-back" href="../../../../modules/flame.html#ignition.flame.tensors.tensor.BasisVector">[docs]</a><span class="k">class</span> <span class="nc">BasisVector</span> <span class="p">(</span><span class="n">Tensor</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Unit basis vector with 1 at given position r.</span>
<span class="sd">    </span>
<span class="sd">    &gt;&gt;&gt; e_0 = BasisVector(0)</span>
<span class="sd">    &gt;&gt;&gt; A = Tensor(&#39;A&#39;)</span>
<span class="sd">    &gt;&gt;&gt; A*e_0 </span>
<span class="sd">    a[0]</span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="n">_op_priority</span> <span class="o">=</span> <span class="mi">122</span>

    <span class="k">def</span> <span class="nf">__new__</span> <span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">pos_or_ten</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kws</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">pos_or_ten</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">)</span> <span class="ow">and</span> <span class="n">pos_or_ten</span><span class="o">.</span><span class="n">rank</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">pos_or_ten</span>
        <span class="k">elif</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">pos_or_ten</span><span class="p">,</span> <span class="nb">int</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Must give either tensor or position, given </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> \
                             <span class="nb">str</span><span class="p">(</span><span class="n">pos_or_ten</span><span class="p">))</span>
        <span class="n">obj</span> <span class="o">=</span> <span class="n">Tensor</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">add_idx</span><span class="p">(</span><span class="s">&quot;e&quot;</span><span class="p">,</span> <span class="n">pos_or_ten</span><span class="p">),</span> <span class="n">rank</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">obj</span><span class="o">.</span><span class="n">idx</span> <span class="o">=</span> <span class="n">pos_or_ten</span>
        <span class="k">return</span> <span class="n">obj</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__rmul__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__mul__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&quot;Inside BasisVector.__mul__&quot;</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">BasisVector</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__mul__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__mul__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__rmul__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&quot;Inside BasisVector.__rmul__&quot;</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">Transpose</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">BasisVector</span><span class="p">):</span>
            <span class="k">if</span> <span class="n">other</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">idx</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">idx</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">one</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">zero</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">):</span>
            <span class="n">ero</span> <span class="o">=</span> <span class="n">other</span><span class="o">.</span><span class="n">rank</span>
            <span class="n">eso</span> <span class="o">=</span> <span class="n">other</span><span class="o">.</span><span class="n">shape</span>
            <span class="k">if</span> <span class="n">ero</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">other</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">add_idx</span><span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">idx</span><span class="p">),</span> <span class="n">rank</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">ero</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">eso</span> <span class="o">==</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
                <span class="k">return</span> <span class="n">other</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">add_idx</span><span class="p">(</span><span class="n">other</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">idx</span><span class="p">),</span> <span class="n">rank</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">BasisVector</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__rmul__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>

</div>
<span class="kn">from</span> <span class="nn">basic_operators</span> <span class="kn">import</span> <span class="n">Transpose</span>
<span class="kn">from</span> <span class="nn">ignition.flame.tensors.constants</span> <span class="kn">import</span> <span class="n">one</span><span class="p">,</span> <span class="n">zero</span>
</pre></div>

          </div>
        </div>
      </div>
        </div>
        <div class="sidebar">
          <h3>Table Of Contents</h3>
          <ul>
<li class="toctree-l1"><a class="reference internal" href="../../../../intro.html">Introduction</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../../install.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../../tutorial.html">Tutorial</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../../modules/index.html">Ignition Modules Reference</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../../contributing.html">Contributing</a></li>
</ul>

          <h3 style="margin-top: 1.5em;">Search</h3>
          <form class="search" action="../../../../search.html" method="get">
            <input type="text" name="q" size="18" />
            <input type="submit" value="Go" />
            <input type="hidden" name="check_keywords" value="yes" />
            <input type="hidden" name="area" value="default" />
          </form>
          <p class="searchtip" style="font-size: 90%">
            Enter search terms or a module, class or function name.
          </p>
        </div>
        <div class="clearer"></div>
      </div>
    </div>

    <div class="footer-wrapper">
      <div class="footer">
        <div class="left">
          <a href="../../../../py-modindex.html" title="Python Module Index"
             >modules</a> |
          <a href="../../../../genindex.html" title="General Index"
             >index</a>
        </div>

        <div class="right">
          
    <div class="footer">
        &copy; Copyright 2010, Andy R. Terrel.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.0.5.
    </div>
        </div>
        <div class="clearer"></div>
      </div>
    </div>

  </body>
</html>



<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>ignition.flame.tensors.tensor_expr &mdash; Ignition v0.1.0 documentation</title>
    <link rel="stylesheet" href="../../../../static/agogo.css" type="text/css" />
    <link rel="stylesheet" href="../../../../static/pygments.css" type="text/css" />
    <script type="text/javascript">
      var DOCUMENTATION_OPTIONS = {
        URL_ROOT:    '../../../../',
        VERSION:     '0.1.0',
        COLLAPSE_INDEX: false,
        FILE_SUFFIX: '.html',
        HAS_SOURCE:  true
      };
    </script>
    <script type="text/javascript" src="../../../../static/jquery.js"></script>
    <script type="text/javascript" src="../../../../static/underscore.js"></script>
    <script type="text/javascript" src="../../../../static/doctools.js"></script>
    <link rel="top" title="Ignition v0.1.0 documentation" href="../../../../index.html" />
    <link rel="up" title="Module code" href="../../../index.html" /> 
  </head>
  <body>
    <div class="header-wrapper">
      <div class="header">
        <h1><a href="../../../../index.html">Ignition v0.1.0 documentation</a></h1>
        <div class="rel">
          <a href="../../../../py-modindex.html" title="Python Module Index"
             >modules</a> |
          <a href="../../../../genindex.html" title="General Index"
             accesskey="I">index</a>
        </div>
       </div>
    </div>

    <div class="content-wrapper">
      <div class="content">
        <div class="document">
            
      <div class="documentwrapper">
        <div class="bodywrapper">
          <div class="body">
            
  <h1>Source code for ignition.flame.tensors.tensor_expr</h1><div class="highlight"><pre>
<span class="kn">import</span> <span class="nn">operator</span>

<span class="kn">from</span> <span class="nn">sympy</span> <span class="kn">import</span> <span class="n">Add</span><span class="p">,</span> <span class="n">Expr</span><span class="p">,</span> <span class="n">Number</span><span class="p">,</span> <span class="n">Mul</span><span class="p">,</span> <span class="n">Pow</span><span class="p">,</span> <span class="n">S</span><span class="p">,</span> <span class="n">Symbol</span>
<span class="kn">from</span> <span class="nn">sympy.core.decorators</span> <span class="kn">import</span> <span class="n">call_highest_priority</span>

<span class="c"># from tensor import Tensor /* cyclic */</span>
<span class="c"># from functions import Inner, Inverse, Transpose /* cyclic */</span>

<span class="k">class</span> <span class="nc">ConformityError</span> <span class="p">(</span><span class="ne">Exception</span><span class="p">):</span>
    <span class="k">pass</span>

<div class="viewcode-block" id="TensorExpr"><a class="viewcode-back" href="../../../../modules/flame.html#ignition.flame.tensors.tensor_expr.TensorExpr">[docs]</a><span class="k">class</span> <span class="nc">TensorExpr</span> <span class="p">(</span><span class="n">Expr</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Base object for things with Tensor properties such as:</span>
<span class="sd">    </span>
<span class="sd">        * rank</span>
<span class="sd">        * shape</span>
<span class="sd">        * has_inverse</span>
<span class="sd">        * algebraic ops </span>
<span class="sd">    </span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="n">_op_priority</span> <span class="o">=</span> <span class="mi">20</span>
    <span class="n">rank</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
    <span class="n">name</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">has_inverse</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">shape</span> <span class="o">=</span> <span class="bp">None</span>
    <span class="n">is_symmetric</span> <span class="o">=</span> <span class="bp">True</span>

    <span class="k">def</span> <span class="nf">__mul_by_one</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="n">self_is_one</span> <span class="o">=</span> <span class="n">is_one</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
        <span class="n">other_is_one</span> <span class="o">=</span> <span class="n">is_one</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">self_is_one</span> <span class="ow">or</span> <span class="n">other_is_one</span><span class="p">:</span>
            <span class="n">ers</span> <span class="o">=</span> <span class="n">expr_rank</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
            <span class="n">ero</span> <span class="o">=</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">ers</span> <span class="o">==</span> <span class="n">ero</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">other</span> <span class="k">if</span> <span class="n">self_is_one</span> <span class="k">else</span> <span class="bp">self</span>
            <span class="k">if</span> <span class="n">self_is_one</span> <span class="ow">and</span> <span class="n">ers</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">other</span>
            <span class="k">if</span> <span class="n">other_is_one</span> <span class="ow">and</span> <span class="n">ero</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="bp">self</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__rmul__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__mul__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="n">is_mul_conforming_or_die</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="ow">or</span> <span class="n">is_zero</span><span class="p">(</span><span class="n">other</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">Tensor</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">,</span> <span class="n">rank</span><span class="o">=</span><span class="n">mul_rank</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">is_inner</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">Inner</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
        <span class="n">mul_by_one</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__mul_by_one</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">mul_by_one</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">mul_by_one</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TensorExpr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__mul__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__mul__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__rmul__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="n">is_mul_conforming_or_die</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="ow">or</span> <span class="n">is_zero</span><span class="p">(</span><span class="n">other</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">Tensor</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">,</span> <span class="n">rank</span><span class="o">=</span><span class="n">mul_rank</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="bp">self</span><span class="p">))</span>
        <span class="k">if</span> <span class="n">is_inner</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">Inner</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
        <span class="n">mul_by_one</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__mul_by_one</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">mul_by_one</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">mul_by_one</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TensorExpr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__rmul__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__radd__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__add__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="n">is_add_conforming_or_die</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">other</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="n">other</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TensorExpr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__add__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__add__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__radd__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="n">is_add_conforming_or_die</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">other</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TensorExpr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__radd__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__rsub__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__sub__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="o">-</span> <span class="n">other</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="n">other</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TensorExpr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__sub__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__sub__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__rsub__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">other</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="n">other</span><span class="p">):</span>
            <span class="k">return</span> <span class="o">-</span> <span class="bp">self</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TensorExpr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__rsub__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__rdiv__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__div__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">ZeroDivisionError</span><span class="p">()</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">TensorExpr</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">Mul</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">Inverse</span><span class="p">(</span><span class="n">other</span><span class="p">))</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TensorExpr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__div__</span><span class="p">(</span><span class="n">other</span><span class="p">)</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__div__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__rdiv__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">raise</span> <span class="ne">ZeroDivisionError</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">Mul</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="n">Inverse</span><span class="p">(</span><span class="bp">self</span><span class="p">))</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__rpow__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__pow__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span>
        <span class="k">if</span> <span class="n">is_one</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span>
        <span class="k">elif</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">other</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span> <span class="ow">and</span> <span class="n">other</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Inverse</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span> <span class="o">**</span> <span class="p">(</span><span class="o">-</span><span class="n">other</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">Pow</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">)</span>

    <span class="nd">@call_highest_priority</span><span class="p">(</span><span class="s">&#39;__pow__&#39;</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__rpow__</span> <span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
        <span class="k">raise</span> <span class="ne">RuntimeError</span><span class="p">(</span><span class="s">&quot;Can&#39;t raise to the tensor power.&quot;</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__neg__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">is_zero</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
            <span class="k">return</span> <span class="bp">self</span>
        <span class="k">return</span> <span class="nb">super</span><span class="p">(</span><span class="n">TensorExpr</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__neg__</span><span class="p">()</span>
</div>
<div class="viewcode-block" id="is_zero"><a class="viewcode-back" href="../../../../modules/flame.html#ignition.flame.tensors.tensor_expr.is_zero">[docs]</a><span class="k">def</span> <span class="nf">is_zero</span> <span class="p">(</span><span class="n">expr</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Returns True, False, or None&quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">expr</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;0&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Transpose</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">is_zero</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">if</span> <span class="n">expr</span> <span class="o">==</span> <span class="n">S</span><span class="p">(</span><span class="mi">0</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">True</span>
</div>
<div class="viewcode-block" id="is_one"><a class="viewcode-back" href="../../../../modules/flame.html#ignition.flame.tensors.tensor_expr.is_one">[docs]</a><span class="k">def</span> <span class="nf">is_one</span> <span class="p">(</span><span class="n">expr</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Returns True, False, or None&quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Tensor</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">expr</span><span class="o">.</span><span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;1&#39;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Transpose</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">is_one</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">if</span> <span class="n">expr</span> <span class="o">==</span> <span class="n">S</span><span class="p">(</span><span class="mi">1</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">True</span>
</div>
<span class="k">def</span> <span class="nf">is_outer</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">esa</span> <span class="o">=</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">esb</span> <span class="o">=</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">==</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> \
           <span class="n">esa</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">esb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">esa</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">esb</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">is_inner</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">esa</span> <span class="o">=</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">esb</span> <span class="o">=</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">==</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> \
           <span class="n">esa</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">esb</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">esa</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">esb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">is_mul_conforming_or_die</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">esa</span> <span class="o">=</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">esb</span> <span class="o">=</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">in</span> <span class="p">[</span><span class="n">esa</span><span class="p">,</span> <span class="n">esb</span><span class="p">]:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">if</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">a</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">!=</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">b</span><span class="p">)[</span><span class="mi">0</span><span class="p">]:</span>
        <span class="k">raise</span> <span class="n">ConformityError</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s"> * </span><span class="si">%s</span><span class="se">\n\t</span><span class="s">ranks </span><span class="si">%d</span><span class="s">, </span><span class="si">%d</span><span class="se">\n\t</span><span class="s">shapes </span><span class="si">%s</span><span class="s">, </span><span class="si">%s</span><span class="s">&quot;</span>\
                              <span class="o">%</span> <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">str</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>
                                 <span class="nb">str</span><span class="p">(</span><span class="n">expr_shape</span><span class="p">(</span><span class="n">a</span><span class="p">)),</span> <span class="nb">str</span><span class="p">(</span><span class="n">expr_shape</span><span class="p">(</span><span class="n">b</span><span class="p">))))</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="k">def</span> <span class="nf">is_add_conforming_or_die</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">a</span> <span class="ow">in</span> <span class="p">[</span><span class="n">S</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">S</span><span class="p">(</span><span class="mi">1</span><span class="p">)]</span> <span class="ow">or</span> <span class="n">b</span> <span class="ow">in</span> <span class="p">[</span><span class="n">S</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">S</span><span class="p">(</span><span class="mi">1</span><span class="p">)]:</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">if</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">!=</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">b</span><span class="p">)</span> <span class="ow">and</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">a</span><span class="p">)</span> <span class="o">!=</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">b</span><span class="p">):</span>
        <span class="k">raise</span> <span class="n">ConformityError</span><span class="p">(</span><span class="s">&quot;</span><span class="si">%s</span><span class="s"> + </span><span class="si">%s</span><span class="se">\n\t</span><span class="s">ranks </span><span class="si">%d</span><span class="s">, </span><span class="si">%d</span><span class="se">\n\t</span><span class="s">shapes </span><span class="si">%s</span><span class="s">, </span><span class="si">%s</span><span class="s">&quot;</span>\
                              <span class="o">%</span> <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="nb">str</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">b</span><span class="p">),</span>
                                 <span class="nb">str</span><span class="p">(</span><span class="n">expr_shape</span><span class="p">(</span><span class="n">a</span><span class="p">)),</span> <span class="nb">str</span><span class="p">(</span><span class="n">expr_shape</span><span class="p">(</span><span class="n">b</span><span class="p">))))</span>
    <span class="k">return</span> <span class="bp">True</span>

<span class="k">def</span> <span class="nf">mul_rank</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">is_outer</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="k">return</span> <span class="mi">2</span>
    <span class="n">era</span> <span class="o">=</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
    <span class="n">erb</span> <span class="o">=</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">era</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">erb</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">max</span><span class="p">(</span><span class="n">era</span><span class="p">,</span> <span class="n">erb</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">era</span> <span class="o">+</span> <span class="n">erb</span> <span class="o">-</span> <span class="mi">2</span>

<div class="viewcode-block" id="expr_shape"><a class="viewcode-back" href="../../../../modules/flame.html#ignition.flame.tensors.tensor_expr.expr_shape">[docs]</a><span class="k">def</span> <span class="nf">expr_shape</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Returns the shape of a given expression</span>

<span class="sd">    Will raise ConformityError if expression does not conform.</span>
<span class="sd">    </span>
<span class="sd">    &gt;&gt;&gt; A = Tensor(&#39;A&#39;, rank=2)</span>
<span class="sd">    &gt;&gt;&gt; B = Tensor(&#39;B&#39;, rank=2)</span>
<span class="sd">    &gt;&gt;&gt; x = Tensor(&#39;x&#39;, rank=1)</span>
<span class="sd">    &gt;&gt;&gt; expr_shape(A+B)</span>
<span class="sd">    (n, n)</span>
<span class="sd">    &gt;&gt;&gt; expr_shape((A+B)*x)</span>
<span class="sd">    (n, 1)</span>
<span class="sd">    &gt;&gt;&gt; expr_shape(A*T(x))</span>
<span class="sd">    ---------------------------------------------------------------------------</span>
<span class="sd">    ConformityError                           Traceback (most recent call last)</span>
<span class="sd">    &quot;&quot;&quot;</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">TensorExpr</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">expr</span><span class="o">.</span><span class="n">shape</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="p">(</span><span class="n">Number</span><span class="p">,</span> <span class="n">Symbol</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">long</span><span class="p">,</span> <span class="nb">float</span><span class="p">)):</span>
        <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Add</span><span class="p">):</span>
        <span class="c">#TODO: Check consistency</span>
        <span class="k">return</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Mul</span><span class="p">):</span>
        <span class="n">arg_shapes</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">expr_shape</span><span class="p">,</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>
        <span class="n">arg_shapes</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">!=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">arg_shapes</span><span class="p">)</span>
        <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">arg_shapes</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">arg_shapes</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">arg_shapes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Pow</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="k">raise</span> <span class="n">ConformityError</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s">&quot;expr_shape can&#39;t handle: </span><span class="si">%s</span><span class="s"> of type: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> \
                              <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">expr</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">expr</span><span class="p">)))</span>
</div>
<div class="viewcode-block" id="expr_rank"><a class="viewcode-back" href="../../../../modules/flame.html#ignition.flame.tensors.tensor_expr.expr_rank">[docs]</a><span class="k">def</span> <span class="nf">expr_rank</span><span class="p">(</span><span class="n">expr</span><span class="p">):</span>
    <span class="sd">&quot;&quot;&quot;Returns the rank of a given expression</span>

<span class="sd">    Will raise ConformityError if expression does not conform.</span>
<span class="sd">    </span>
<span class="sd">    &gt;&gt;&gt; A = Tensor(&#39;A&#39;, rank=2)</span>
<span class="sd">    &gt;&gt;&gt; B = Tensor(&#39;B&#39;, rank=2)</span>
<span class="sd">    &gt;&gt;&gt; x = Tensor(&#39;x&#39;, rank=1)</span>
<span class="sd">    &gt;&gt;&gt; expr_rank(A+B)</span>
<span class="sd">    2</span>
<span class="sd">    &gt;&gt;&gt; expr_rank((A+B)*x)</span>
<span class="sd">    1</span>
<span class="sd">    &gt;&gt;&gt; expr_rank(A*T(x))</span>
<span class="sd">    ---------------------------------------------------------------------------</span>
<span class="sd">    ConformityError                           Traceback (most recent call last)</span>
<span class="sd">    &quot;&quot;&quot;</span>

    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">TensorExpr</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">expr</span><span class="o">.</span><span class="n">rank</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="p">(</span><span class="n">Number</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">float</span><span class="p">)):</span>
        <span class="k">return</span> <span class="mi">0</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Add</span><span class="p">):</span>
        <span class="c">#TODO: Check consistency</span>
        <span class="k">return</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Mul</span><span class="p">):</span>
        <span class="n">arg_shape</span> <span class="o">=</span> <span class="n">expr_shape</span><span class="p">(</span><span class="n">expr</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">arg_shape</span><span class="p">))</span>
    <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Pow</span><span class="p">):</span>
        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">(</span><span class="n">Number</span><span class="p">,</span> <span class="nb">int</span><span class="p">)):</span>
            <span class="n">base_rank</span> <span class="o">=</span> <span class="n">expr_rank</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="k">if</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">base_rank</span>
            <span class="k">if</span> <span class="n">base_rank</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">base_rank</span> <span class="o">==</span> <span class="mi">2</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">base_rank</span>
            <span class="k">if</span> <span class="n">base_rank</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">0</span>
            <span class="k">if</span> <span class="n">base_rank</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
                <span class="k">return</span> <span class="mi">1</span>
    <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">(</span><span class="s">&quot;expr_rank can&#39;t handle: </span><span class="si">%s</span><span class="s"> of type: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> \
                              <span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">expr</span><span class="p">),</span> <span class="nb">type</span><span class="p">(</span><span class="n">expr</span><span class="p">)))</span>
</div>
<span class="k">def</span> <span class="nf">expr_coeff</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">var</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">Mul</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">expr</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">var</span> <span class="ow">in</span> <span class="n">x</span><span class="p">,</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">1</span><span class="p">:</span>
        <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;Can&#39;t handle eqns with more than one of var, given </span><span class="si">%s</span><span class="s">, </span><span class="si">%s</span><span class="s">&quot;</span>\
                         <span class="o">%</span> <span class="p">(</span><span class="n">expr</span><span class="p">,</span> <span class="n">var</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">e</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">var</span> <span class="ow">in</span> <span class="n">e</span><span class="p">:</span>
            <span class="k">break</span>
    <span class="n">lhs</span> <span class="o">=</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[:</span><span class="n">idx</span><span class="p">]</span>
    <span class="n">rhs</span> <span class="o">=</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span><span class="p">:]</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">idx</span> <span class="o">+</span> <span class="mi">1</span> <span class="k">else</span> <span class="p">[]</span>
    <span class="k">return</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">operator</span><span class="o">.</span><span class="n">mul</span><span class="p">,</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">S</span><span class="p">(</span><span class="mi">1</span><span class="p">)),</span> <span class="n">expr</span><span class="o">.</span><span class="n">args</span><span class="p">[</span><span class="n">idx</span><span class="p">],</span> <span class="nb">reduce</span><span class="p">(</span><span class="n">operator</span><span class="o">.</span><span class="n">mul</span><span class="p">,</span> <span class="n">rhs</span><span class="p">,</span> <span class="n">S</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>


<span class="kn">from</span> <span class="nn">tensor</span> <span class="kn">import</span> <span class="n">Tensor</span> <span class="c">#/* cyclic */</span>
<span class="kn">from</span> <span class="nn">basic_operators</span> <span class="kn">import</span> <span class="n">Inner</span><span class="p">,</span> <span class="n">Inverse</span><span class="p">,</span> <span class="n">Transpose</span>
</pre></div>

          </div>
        </div>
      </div>
        </div>
        <div class="sidebar">
          <h3>Table Of Contents</h3>
          <ul>
<li class="toctree-l1"><a class="reference internal" href="../../../../intro.html">Introduction</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../../install.html">Installation</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../../tutorial/index.html">Tutorial</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../../further_resources.html">Further Resources</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../../modules/index.html">Ignition Modules Reference</a></li>
<li class="toctree-l1"><a class="reference internal" href="../../../../contributing.html">Contributing</a></li>
</ul>

          <h3 style="margin-top: 1.5em;">Search</h3>
          <form class="search" action="../../../../search.html" method="get">
            <input type="text" name="q" size="18" />
            <input type="submit" value="Go" />
            <input type="hidden" name="check_keywords" value="yes" />
            <input type="hidden" name="area" value="default" />
          </form>
          <p class="searchtip" style="font-size: 90%">
            Enter search terms or a module, class or function name.
          </p>
        </div>
        <div class="clearer"></div>
      </div>
    </div>

    <div class="footer-wrapper">
      <div class="footer">
        <div class="left">
          <a href="../../../../py-modindex.html" title="Python Module Index"
             >modules</a> |
          <a href="../../../../genindex.html" title="General Index"
             >index</a>
        </div>

        <div class="right">
          
    <div class="footer">
        &copy; Copyright 2010, Andy R. Terrel.
      Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.0.5.
    </div>
        </div>
        <div class="clearer"></div>
      </div>
    </div>

  </body>
</html>
